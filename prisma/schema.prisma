generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model caption_tags {
  id         Int       @id @default(autoincrement())
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  user_id    Int
  post_id    Int
  posts      posts     @relation(fields: [post_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users      users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([user_id, post_id])
}

model comments {
  id         Int       @id @default(autoincrement())
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  updated_at DateTime? @default(now()) @db.Timestamptz(6)
  contents   String    @db.VarChar(240)
  user_id    Int
  post_id    Int
  posts      posts     @relation(fields: [post_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users      users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  likes      likes[]
}

model followers {
  id                                 Int       @id @default(autoincrement())
  created_at                         DateTime? @default(now()) @db.Timestamptz(6)
  leader_id                          Int
  follower_id                        Int
  users_followers_follower_idTousers users     @relation("followers_follower_idTousers", fields: [follower_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users_followers_leader_idTousers   users     @relation("followers_leader_idTousers", fields: [leader_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([leader_id, follower_id])
}

model hashtags {
  id             Int              @id @default(autoincrement())
  created_at     DateTime?        @default(now()) @db.Timestamptz(6)
  title          String           @unique @db.VarChar(20)
  hashtags_posts hashtags_posts[]
}

model hashtags_posts {
  id         Int      @id @default(autoincrement())
  hashtag_id Int
  post_id    Int
  hashtags   hashtags @relation(fields: [hashtag_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  posts      posts    @relation(fields: [post_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([hashtag_id, post_id])
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model likes {
  id         Int       @id @default(autoincrement())
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  user_id    Int
  post_id    Int?
  comment_id Int?
  comments   comments? @relation(fields: [comment_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  posts      posts?    @relation(fields: [post_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users      users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([user_id, post_id, comment_id])
}

model photo_tags {
  id         Int       @id @default(autoincrement())
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  updated_at DateTime? @default(now()) @db.Timestamptz(6)
  user_id    Int
  post_id    Int
  x          Int
  y          Int
  posts      posts     @relation(fields: [post_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users      users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([user_id, post_id])
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model posts {
  id             Int              @id @default(autoincrement())
  created_at     DateTime?        @default(now()) @db.Timestamptz(6)
  updated_at     DateTime?        @default(now()) @db.Timestamptz(6)
  url            String           @db.VarChar(200)
  caption        String?          @db.VarChar(240)
  lat            Float?           @db.Real
  lng            Float?           @db.Real
  user_id        Int
  caption_tags   caption_tags[]
  comments       comments[]
  hashtags_posts hashtags_posts[]
  likes          likes[]
  photo_tags     photo_tags[]
  users          users            @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model users {
  id                                     Int            @id @default(autoincrement())
  created_at                             DateTime?      @default(now()) @db.Timestamptz(6)
  updated_at                             DateTime?      @default(now()) @db.Timestamptz(6)
  username                               String         @db.VarChar(30)
  bio                                    String?        @db.VarChar(400)
  avatar                                 String?        @db.VarChar(200)
  phone                                  String?        @db.VarChar(25)
  email                                  String?        @db.VarChar(40)
  password                               String?        @db.VarChar(50)
  status                                 String?        @db.VarChar(15)
  caption_tags                           caption_tags[]
  comments                               comments[]
  followers_followers_follower_idTousers followers[]    @relation("followers_follower_idTousers")
  followers_followers_leader_idTousers   followers[]    @relation("followers_leader_idTousers")
  likes                                  likes[]
  photo_tags                             photo_tags[]
  posts                                  posts[]
}
